/*!

  \page index.html overview

  \title Patchmanager Documentation

  \section1 User documentation

  See:

  \list
  \li \l {Patchmanager for SailfishOS}
  \endlist

  \section1 Patch Developers
  For information for Patch Developers, see:
  \list
  \li \l{Patch Developer Documentation}
  \endlist

  \section1 Internals

  For information on how Patchmanager operates internally, see:

  \list
  \li \l {Overview of Patchmanager Internals}
  \li \l {Patchmanager Services}
  \li \l {Patchmanager Configuration Files}
  \endlist

  \section1 Patchmanager Developers

  \section2 Translations

  If you want to translate ("localise") Patchmanager to a language you know
  well or enhance an existing translation, please read Patchmanager's
  corresponding Wiki page

  \l{https://github.com/sailfishos-patches/patchmanager/wiki/Translations-(%22i18n%22,-%22l10n%22)}{Translations ("i18n", "l10n")}.

  \section2 Applications

  The Patchmanager project includes these applications:

  \section3 GUI Applications
  \list
  \li \l {Patchmanager Documentation: Settings Plugin}{Patchmanager Settings Plugin}, a plugin for the Jolla Settings app to launch the Patchmanager application
  \li \l {Patchmanager Documentation: QML Plugin}{Patchmanager QML Plugin}, the main GUI Application
  \li \l {Patchmanager Documentation: Startup Dialog}{Patchmanager Startup Dialog}, a GUI shown at Lipstick startup
  \endlist

  \section3 Infrastructure Applications
  \list
  \li \l {Patchmanager Documentation: Daemon}{Patchmanager Daemon}
  \li \l {Patchmanager Documentation: Preload Library}{Preload Library}
  \li \l {Patchmanager Web Catalog}{Web Catalog}
  \endlist

*/

/****** Overview page *******/
/*!
  \title Overview of Patchmanager Internals

  \page pmoverview.html overview
  \indexpage Patchmanager Documentation
  \nextpage {Patchmanager Services}

  The workflow of operations Patchmanager performs:

  \section1 Operation Flow

  \section2 1. A Patch is "activated"

  When a user activates a Patch via the GUI (or, theoretically, by calling the
  right D-Bus method without a GUI), a signal is sent to the Patchmanager
  Daemon.

  When the signal is received, for each file that is changed by the patch file,
  a copy of the original file is put into a cache directory in \c /tmp, and the
  changes are applied to this copy instead of the original file.

  If there are paths or files involved in the patch file which do not exist yet
  in the filesystem, they will be created in the cache directory, and a symbolic link
  pointing to them is placed in the original filesystem location.

  \section2 2. A patched application is launched.

  Through library preloading, the \c libpreloadpatchmanager.so library is injected into the launching binary.

  \section2 3. The Preload Library:

  \list
  \li intercepts calls to \l {https://www.man7.org/linux/man-pages/man2/open.2.html}{\c{open()} (or \c{open64()})},
  \li analyses which files the call was meant to open
  \li asks the Patchmanager Daemon (via UNIX Socket) whether it knows of a patched version.
  \endlist

  If that is the case, the daemon will return a path to its cache directory, and
  the library redirects the call to that file instead of the original. Otherwise,
  the \c{open()} call is executed on the original file.

  Certain paths are blacklisted for these operations to reduce the risk of critical
  services, or the Patchmanager binaries proper, stumbling over these redirections.

  \warning After activating a Patch, the daemon may also inform the UI that some
  apps or services need to be restarted. The UI client is expected to issue the
  command to restart these soon.
  As long as the corresponding processes are not restarted, the effect of the
  applied Patch will not show, or may only show partially, depending on the "patch
  history" of the respective process.

  \note Due to the nature of the interaction between the daemon and the
  library, applications which are executed ...

  \list
  \li without respecting \c /etc/ld.so.preload (e.g. Android binaries in the base system)
  \li before the daemon has started and initialised
  \endlist

  ... will obviously not see patched file contents. Patch authors are advised
  to use other methods (e.g. proper RPM packages, or e.g. systemd services to
  manipulate files in these cases, and refrain from using Patches to do that.)

  \section2 Patch folder structure

  All Patches managed by PM are installed under \c /usr/share/patchmanager/patches/NAME with NAME being a uniquely named directory.

  For details about the structure of that location, as well as Patch packaging and installation methods, see the \l{patchdevinstall}{Patch Developer documentation}.
*/

/****** Web Catalog page *******/
/*!
  \title Patchmanager Web Catalog

  \page pmwc.html

  The Web Catalog is currently not maintained by the Patchmanager project proper and hence is only tersely documented here.

  \e{to be continued...}

  \section2 Development

  Web Catalog is in production, but its development is in maintainance-only mode.

  The source code is currently maintained at \l {Web Catalog Source Code Repository}

*/

/****** Services Documentation page *******/
/*!
  \title Patchmanager Services
  \previouspage {Overview of Patchmanager Internals}
  \nextpage {Patchmanager Configuration Files}

  \page pmservices.html overview

  \section1 Installation and Configuration

  \section2 D-Bus System Service
  \target dbus-sys
  The D-Bus services reserve the bus name \c org.SfietKonstantin.patchmanager

  It is defined as follows:

  \quotefile  org.SfietKonstantin.patchmanager.xml

  Calls can be issued this way, for example:

  \badcode
      dbus-send --print-reply --system --dest=org.SfietKonstantin.patchmanager /org/SfietKonstantin/patchmanager org.SfietKonstantin.patchmanager.checkForUpdates
  \endcode

  \section2 Systemd System Units

      \table
        \header
          \li Name
          \li Type
          \li Component
          \li Description
        \row
          \li \c checkForUpdates-org.SfietKonstantin.patchmanager.service
          \li service
          \li -
          \li Calls the \l {PatchManagerObject::checkForUpdates}{checkForUpdates()} method via D-Bus.
        \row
          \li \c checkForUpdates-org.SfietKonstantin.patchmanager.timer
          \li timer
          \li -
          \li Runs the service above, every two hours.
        \row
          \li \c dbus-org.SfietKonstantin.patchmanager.service
          \li dbus-activated service
          \li \l {Patchmanager Documentation: Daemon}{Daemon}
          \li Starts / activates the D-Bus service.
        \row
          \li \c /var/lib/environment/patchmanager/10-dbus.conf
          \li environment file
          \li \l {Patchmanager Documentation: Daemon}{Daemon}
          \li Configures the environment in which the Systemd service is started.
        \row
          \li \c /etc/dbus-1/system.d/org.SfietKonstantin.patchmanager.conf
          \li policy file
          \li \l {Patchmanager Documentation: Daemon}{Daemon}
          \li Configures the access policy for the D-Bus service.
      \endtable

  \section2 Systemd User Units
  \target sd_userunits

      \table
        \header
          \li Name
          \li Type
          \li Component
          \li Description
        \row
          \li \c dbus-org.SfietKonstantin.patchmanager.service
          \li dbus-activated service
          \li \l {Patchmanager Documentation: Startup Dialog}{Dialog}
          \li Starts the Startup Dialog, if necessary.
        \row
          \li \c lipstick-patchmanager.service
          \li service
          \li \l {Patchmanager Documentation: Startup Dialog}{Dialog}
          \li Calls the \l {PatchManagerObject::lipstickChanged}{lipstickChanged()} method via D-Bus.
        \row
          \li \c /var/lib/environment/patchmanager-dialog/*.conf
          \li environment file
          \li \l {Patchmanager Documentation: Startup Dialog}{Dialog}
          \li Configures the environment in which the dialog service is started.
      \endtable

  \c lipstick-patchmanager.service watches the state of the Lipstick service.
  If Lipstick crashes, the Patchmanager Daemon assumes it was caused by a patch
  and goes into \c failed state. In this state, no Patches are activated, and
  PM must be reactivated via the GUI.

  \section1 Manual Invocation

  Aside of using appropriate tools as \c systemctl, \c busctl, or \c dbus-send
  to invoke Patchmanager's functions, the patchmanager binary can also serve as
  CLI, if called from command line.  See the output of \c{patchmanager --help}
  and PatchManagerObject::process() for more information.

  There is also a shell script called \c patchmanager-tool, wrapping the
  capabilities of \c patchmanager to generate more useful functions.

  \note At the time this was written, \c patchmanager-tool is not yet
  distributed with the default packages. You can find it in the source
  repository though, under \c src/tools/.

  \section1 Logging and Debugging

  About the contents of the configuration files, see \l {Patchmanager Configuration Files}.

  After changing its configuration, Patchmanager's system service must be restarted.

*/
  /****** Services Documentation page *******/
/*!
  \title Patchmanager Configuration Files
  \previouspage {Patchmanager Services}

  \page pmconfig.html overview

  \section2 \c{/etc/patchmanager2.conf}

  \target inifile

  Stores configuration and state storage for the \l {Patchmanager Documentation: Daemon}{Daemon}.

  It is an INI-style configuration file and has two possible sections: \c settings and \c votes.

  \note The location of the file is determined by the \c s_newConfigLocation constant
  of the daemon source. (See the head of \c{src/bin/patchmanager-daemon/patchmanagerobject.cpp})

  \section3 Config section \c [settings]

  \table
    \header
    \li Key
    \li Type
    \li default
    \li Description
    \row
    \li \c applied
    \li list of strings, comma-separated
    \li empty
    \li Stores the list of "activated" Patches.
    \row
    \li \c workingPatches
    \li list of strings, comma-separated
    \li empty
    \li Stores a list of Patches, which represent a "last-known-good" / working set of enabled Patches.  This list is automatically copied from \c applied after each successful run of auto-apply.
    \row
    \li \c applyOnBoot
    \li boolean
    \li \c false
    \li Whether to activate all enabled Patches during OS startup or to show the {Patchmanager Documentation: Startup Dialog}{Startup Dialog}.
    \row
    \li \c bitnessMangle
    \li boolean
    \li \c false
    \li Convert Patch contents so they are applicable to the local architecture (e.g., \c lib versus \c lib64 path elements).
    \row
    \li \c developerMode
    \li boolean
    \li \c false
    \li \warning \b deprecated.  Before Patchmanager 3.2.7, this was used to store the settings for the "Developer Mode".  This mode has been split into \c patchDevelMode and \c sfosVersionCheck
    \row
    \li \c notifyOnSuccess
    \li boolean
    \li \c true
    \li Whether to show notifications about successful actions on the GUI.
    \row
    \li \c order
    \li list of strings, comma-separated
    \li empty
    \li The order of Patches, both in the list on the GUI, and the sequence in which they will be activated and hence their patch files applied.
    \row
    \li \c patchDevelMode
    \li boolean
    \li \c false
    \li
    \row
    \li \c sfosVersionCheck
    \li integer (enum)
    \li 0 (strict)
    \li Whether to relax the version checking in the Patchmanager GUI.  The default setting will only allow Patches to be downloaded or activated, of which an entry in their compatibility field exactly matches the currently installed OS version.
  \endtable

  \section3 Config section [votes]

  Saves the voting state for each Patch a user has voted on in the
  {Patchmanager Documentation: Settings Plugin}{Settings Plugin}.

  \section2 \c{/var/lib/environment/patchmanager-dialog/}

  This location can contain one or more environment files for a systemd service
  (see \l {https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html}{systemd.exec}).
  Their filename must end in \c{.conf} and are read by \l {sd_userunits}{dbus-org.SfietKonstantin.patchmanager.service}.

  Files placed here can be used to alter logging behaviour of the Dialog by
  changing the value of \c QT_LOGGING_RULES.

  \sa {Patchmanager Services}

  \note In default patchmanager installations, this location does not exist.

  \section2 \c{/var/lib/environment/patchmanager/10-dbus.conf}

  This file is read by the \l {Patchmanager Documentation: Daemon}{Daemon}.

  Configures the location of the socket file used to communicate with
  applications in user scope via \c DBUS_SESSION_BUS_ADDRESS.
  Per default this is \c {unix:path=/run/user/100000/dbus/user_bus_socket}.

  If unset, the Daemon will fallback to a hardcoded default.

  \warning Due to this setting, the socket can only be accessed by applications
  runing as the "Device Owner" user (UID 100000), i.e. either \c nemo or \c defaultuser.

  This file can also be used to alter logging behaviour of the Daemon by
  changing the value of \c QT_LOGGING_RULES. Per default this is set to
  \c{*.debug=false}.

  \sa {Patchmanager Services}, {D-Bus Documentation}, {Qt Logging Rules}

*/

