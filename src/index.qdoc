/*!

  \page index.html overview

  \title Patchmanager Documentation

  For User documentation, see \l {https://github.com/sailfishos-patches/patchmanager/#information-for-users}{User Documentation}.

  For Patch Developer documentation, see \l {https://github.com/sailfishos-patches/patchmanager/#information-for-patch-developers}{Developer Documentation}.

  \section1 Internals

  For information on how Patchmanager operates internally, see:

  \list
  \li \l {Patchmanager Overview}
  \li \l {Patchmanager Services}
  \li \l {Patchmanager Configuration Files}
  \endlist

  \section1 Applications

  The Patchmanager project includes these applications:

  \section2 GUI Applications
  \list
  \li \l {Patchmanager Documentation: Settings Plugin}{Patchmanager Settings Plugin}, a plugin for the Jolla Settings app to launch the Patchmanager application
  \li \l {Patchmanager Documentation: QML Plugin}{Patchmanager QML Plugin}, the main GUI Application
  \li \l {Patchmanager Documentation: Startup Dialog}{Patchmanager Startup Dialog}, a GUI shown at Lipstick startup
  \endlist

  \section2 Infrastructure Applications
  \list
  \li \l {Patchmanager Documentation: Daemon}{Patchmanager Daemon}
  \li \l {Patchmanager Documentation: Preload Library}{Preload Library}
  \li \l {Patchmanager Web Catalog}{Web Catalog}
  \endlist

*/

/****** Overview page *******/
/*!
  \title Overview of Patchmanager (PM)

  \page pmoverview.html overview
  \indexpage Patchmanager Documentation
  \nextpage {Patchmanager Services}

  The workflow of operations Patchmanager performs:

  \section1 Operation Flow

  \section2 1. A Patch is "activated"

  When a user activates a Patch via the GUI, a signal is sent to the Patchmanager daemon.

  The daemon will then:

  For each file a Patch alters, copy the original file into a cache directory in \c /tmp and apply the changes to this copy instead of the original.

  If paths or files are referenced by a Patch which do not yet exist on the filesystem, these will be created in the cache directory, and symlinks pointing to them are placed in the original filesystem.

  \section2 2. A patched application is launched.

  Through library preloading, the \c libpreloadpatchmanager.so library is injected into the launching binary.

  \section2 3. The Preload Library:

  \list
  \li Intercepts calls to \l {https://www.man7.org/linux/man-pages/man2/open.2.html}{\c{open()} (or \c{open64()})},
  \li analyses which files the call was meant to open
  \li asks the Patchmanager daemon (via socket) if it is aware of a patched version of any of these files.
  \endlist

  If so, the daemon will return a path to its cache directory, and the library redirects the call to that file instead of the original.  Otherwise, the \c{open()} call is executed on the original file.

  Certain paths are blacklisted for these operations to reduce the risk of critical services, or the Patchmanager binaries proper, stumbling over these redirections.

  \note After activating a Patch, the Patchmanager daemon may inform the Patchmanager GUI that some apps or services need to be restarted.  As long as the corresponding processes are not restarted, the applied Patch will be not at all or only partially in effect, depending on the "patch history" of the respective process.

  \section1 Patch Installation
  There are four ways a Patch can be deployed:

  \list
  \li Web Catalog
  \li RPM package
  \li TAR package
  \li manual installation
  \endlist

  \section2 Patch folder structure

  All Patches managed by PM are installed under \c /usr/share/patchmanager/patches/NAME with NAME being a uniquely named directory.

  This directory must contain at least two files: a \c JSON file called \c patch.json containing metadata, and a \c diff file called \c{unified_diff.patch}.

  It may optionally also contain:
    \list
    \li Qt translation (.qm) files
    \li icon files in PNG format
    \li a QML file called \c main.qml (whose root element is a Sailfish Silica \c{Page}).
    \li other QML-compatible files which are referenced / loaded from \c main.qml
    \endlist

  \note The directory NAME is usually and by convention the same as the Patch metadata field \c name, but this is not a strict requirement.  NAME should be reasonably unique though, in order to avoid naming conflicts with other Patches.

  \section2 Web Catalog

  Installation via Patchmanager's Web Catalog is the most common and recommended way of deploying Patches.
  This is carried out in the Patchmanager GUI by selecting \uicontrol install on the \l {WebPatchPage}{Patch Page}.

  PM will download metadata and a tar archive from the Web Catalog, extract the archive into the Patch storage location, and generate the necessary JSON file from the metadata.

  \section2 RPM package

  Patches may be distributed as RPM files, which assure the placement of files according to the structure explained above.  RPM files also provide advanced features as specifying dependencies and scriptlets which may be necessary for the correct operation or installation of a Patch.

  \section2 TAR package

  Patch developers may offer a Patch as a "naked" \c tar archive.  Although it should contain all necessary files, all checks to assure that the layout and content of the files in the archive are correct must be carried out by the user, in contrast to tar archives uploaded to the Web Catalog.

  \section2 Manual installation

  Patch developers or users may want to quickly place a Patch under PM's supervision without the effort of packaging and installing this Patch properly.  This can be easily done, as long the aforementioned requirements are obeyed.

  \e{to be continued...}

*/
/****** Web Catalog page *******/
/*!
  \title Patchmanager Web Catalog

  \page pmwc.html

  The Web Catalog is currently not maintained by the Patchmanager project proper and hence is only tersely documented here.

  \e{to be continued...}

*/

/****** Services Documentation page *******/
/*!
  \title Patchmanager Services
  \previouspage {Patchmanager Overview}
  \nextpage {Patchmanager Configuration Files}

  \page pmservices.html overview

  \section1 Installation and Configuration

  \section2 D-Bus System Service
  \target dbus-sys
  The D-Bus services reserve the bus name \c org.SfietKonstantin.patchmanager

  It is defined as follows:

  \quotefile dbus/org.SfietKonstantin.patchmanager.xml

  Calls can be issued this way, for example:

  \badcode
      dbus-send --print-reply --system --dest=org.SfietKonstantin.patchmanager /org/SfietKonstantin/patchmanager org.SfietKonstantin.patchmanager.checkforUpdates
  \endcode

  \section2 Systemd System Units

      \table
        \header
          \li Name
          \li Type
          \li Component
          \li Description
        \row
          \li \c UNITDIR/checkForUpdates-org.SfietKonstantin.patchmanager.service
          \li service
          \li -
          \li Calls the \c checkForUpdates() method via D-Bus.
        \row
          \li \c UNITDIR/checkForUpdates-org.SfietKonstantin.patchmanager.timer
          \li timer
          \li -
          \li Runs the service above, every two hours.
        \row
          \li \c UNITDIR/dbus-org.SfietKonstantin.patchmanager.service
          \li dbus-activated service
          \li \l {Patchmanager Documentation: Daemon}{Daemon}
          \li Starts / activates the D-Bus service.
        \row
          \li \c /var/lib/environment/patchmanager/10-dbus.conf
          \li environment file
          \li \l {Patchmanager Documentation: Daemon}{Daemon}
          \li Configures the environment in which the Systemd service is started.
        \row
          \li \c /etc/dbus-1/system.d/org.SfietKonstantin.patchmanager.conf
          \li policy file
          \li \l {Patchmanager Documentation: Daemon}{Daemon}
          \li Configures the access policy for the D-Bus service.
      \endtable

  \section2 Systemd User Units

      \table
        \header
          \li Name
          \li Type
          \li Component
          \li Description
        \row
          \li \c $USERUNITDIR/dbus-org.SfietKonstantin.patchmanager.service
          \li dbus-activated service
          \li \l {Patchmanager Documentation: Startup Dialog}{Dialog}
          \li Starts the Startup Dialog, if necessary.
        \row
          \li \c $USERUNITDIR/lipstick-patchmanager.service
          \li service
          \li \l {Patchmanager Documentation: Startup Dialog}{Dialog}
          \li Calls the \c lipstickChanged() method via D-Bus.
        \row
          \li \c /var/lib/environment/patchmanager-dialog/*.conf
          \li environment file
          \li \l {Patchmanager Documentation: Startup Dialog}{Dialog}
          \li Configures the environment in which the dialog service is started.
      \endtable

  \c lipstick-patchmanager.service watches the state of the Lipstick service.  If Lipstick crashes, the Patchmanager daemon assumes it was caused by a Patch and goes into \c failed state.  In this state, all enabled services are disabled, and PM must be reactivated via the GUI.

  \section1 Manual Invocation

  Aside of using appropriate tools as \c systemctl, \c busctl, or \c dbus-send to invoke Patchmanager's functions, the patchmanager binary can also serve as CLI, if called from command line.  See the output of \c{patchmanager --help} and PatchManagerObject::process() for more information.

  Additionally a shell script called \c patchmanager-tool exists, which builds upon the capabilities of \c patchmanager to provide more sophisticated and generic functions.

  \note At the time of compiling this documentation, \c patchmanager-tool is not yet distributed as part of the regular RPM packages.  It can be obtained from the directory \c src/tools/ in Patchmanager's source code repository.

  \section1 Logging and Debugging

  Debug logging by the Patchmananger daemon can be configured by setting the \c QT_LOGGING_RULES variable to, e.g., \c{"*.debug=true"} in the environment file \c /var/lib/environment/patchmanager/10-dbus.conf

  After changing this, Patchmanager's system service must be restarted for evaluating the new values.

*/
  /****** Services Documentation page *******/
/*!
  \title Patchmanager Configuration Files
  \previouspage {Patchmanager Services}

  \page pmconfig.html overview

  \section2 \c{/etc/patchmanager2.conf}

  \target inifile

  An INI-style configuration file and state storage.

  It consists of two sections: \c settings and \c votes

  \section3 \c settings

  \table
    \header
    \li Key
    \li Type
    \li default
    \li Description
    \row
    \li applied
    \li list of strings, comma-separated
    \li empty
    \li Stores the list of "activated" Patches.
    \row
    \li workingPatches
    \li list of strings, comma-separated
    \li empty
    \li Stores a list of Patches, which represent a "last-known-good" / working set of enabled Patches.  This list is automatically copied from \c applied after each successful run of auto-apply.
    \row
    \li applyOnBoot
    \li Boolean
    \li \c false
    \li Whether to activate all enabled Patches during OS startup or to show the {Patchmanager Documentation: Startup Dialog}{Startup Dialog}.
    \row
    \li bitnessMangle
    \li Boolean
    \li \c false
    \li Convert Patch contents so they are applicable to the local architecture (e.g., \c lib versus \c lib64 path elements).
    \row
    \li developerMode
    \li Boolean
    \li \c false
    \li \warning \b deprecated.  Before Patchmanager 3.2.7, this was used to store the settings for the "Developer Mode".  This mode has been split into \c patchDevelMode and \c sfosVersionCheck
    \row
    \li notifyOnSuccess
    \li Boolean
    \li \c true
    \li Whether to show notifications about successful actions on the GUI.
    \row
    \li order
    \li list of strings, comma-separated
    \li empty
    \li The order of Patches, both in the list on the GUI, and the sequence in which they will be activated and hence their patch files applied.
    \row
    \li patchDevelMode
    \li Boolean
    \li \c false
    \li
    \row
    \li sfosVersionCheck
    \li Integer (Enum)
    \li 0 (strict)
    \li Whether to relax the version checking in the Patchmanager GUI.  The default setting will only allow Patches to be downloaded or activated, of which an entry in their compatibility field exactly matches the currently installed OS version.
  \endtable

  \section3 \c [votes]

  \e{to be written...}

  \section2 \c{/var/lib/environment/patchmanager-dialog/*.conf}
  \section2 \c{/var/lib/environment/patchmanager/10-dbus.conf}
*/
