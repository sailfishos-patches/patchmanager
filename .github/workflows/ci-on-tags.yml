name: CI on tags

on:
  push:
    tags:
      # '**' also matches the slash ('/'), in contrast to '*',
      # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - '**'
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

# See, e.g.: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
env:
  # For the latest available docker image, see https://github.com/CODeRUS/docker-sailfishos-platform-sdk
  LATEST: 4.5.0.16
  # Do not wait up to the default of 10 minutes for network timeouts in a workflow which runs at most 20 minutes
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2

defaults:
  run:
    # Note thas 'bash' provides -o pipefail, in contrast to the default (i.e., unspecified, which also uses bash) or 'sh',
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
    shell: sh

concurrency:
  group: ci-${{ github.ref_name }}
  cancel-in-progress: false  # 'false' (default) allows for two concurrent runs, one executing and one freshly enqueued; 'true' for only one; no 'concurrency:' defined for multiple.

jobs:
  # One job for the latest Docker images used and one for the oldest ones.
  # Trying to download three multi-GB, layered docker images in a single job may
  # result in "docker: write /var/lib/docker/tmp/GetImageBlobXYZ: no space left on device."
  
  build-on-LATEST:
    env:
      RELEASE: ${{ env.LATEST }}
    runs-on: ubuntu-22.04
    steps:

    - name: Checkout git repository
      uses: actions/checkout@v3

    #- name: Prepare
    #  run: 

    # Caching Docker images is not ready yet, see 
    # https://github.com/storeman-developers/harbour-storeman-installer/blob/devel/cache-docker-images_github-ci.md
    #- name: Cache Docker images of the Sailfish-SDK
    #  id: cache-sdk
    #  uses: actions/cache@v3
    #  with:
    #    path: $GITHUB_WORKSPACE/â€¦
    #    key: cache

    - name: Build ${{ env.ARCH }} on ${{ env.RELEASE }}
      env:
        ARCH: i486
      run: |
        set -x
        mkdir -p output/$RELEASE/$ARCH
        docker run --rm -v $PWD:/share coderus/sailfishos-platform-sdk:$RELEASE /bin/sh -xc '
           mkdir -p build
           cd build
           cp -r /share/. .
           mb2 -t SailfishOS-$1-$2 build -d
           sudo cp -r RPMS/. /share/output/$1/$2/' sh_mb2 $RELEASE $ARCH

    - name: Build ${{ env.ARCH }} on ${{ env.RELEASE }}
      env:
        ARCH: armv7hl
      run: |
        set -x
        mkdir -p output/$RELEASE/$ARCH
        docker run --rm -v $PWD:/share coderus/sailfishos-platform-sdk:$RELEASE /bin/sh -xc '
           mkdir -p build
           cd build
           cp -r /share/. .
           mb2 -t SailfishOS-$1-$2 build -d
           sudo cp -r RPMS/. /share/output/$1/$2/' sh_mb2 $RELEASE $ARCH

    - name: Build ${{ env.ARCH }} on ${{ env.RELEASE }}
      env:
        ARCH: aarch64
      run: |
        set -x
        mkdir -p output/$RELEASE/$ARCH
        docker run --rm -v $PWD:/share coderus/sailfishos-platform-sdk:$RELEASE /bin/sh -xc '
           mkdir -p build
           cd build
           cp -r /share/. .
           mb2 -t SailfishOS-$1-$2 build -d
           sudo cp -r RPMS/. /share/output/$1/$2/' sh_mb2 $RELEASE $ARCH

    - name: Upload build results
      uses: actions/upload-artifact@v3
      with:
        name: RPM-build-results-${{ env.RELEASE }}
        path: output/

  build-on-OLDEST:
    runs-on: ubuntu-22.04
    steps:

    - name: Checkout git repository
      uses: actions/checkout@v3

    - name: Build ${{ env.ARCH }} on ${{ env.RELEASE }}
      env:
        ARCH: i486
        RELEASE: 3.4.0.24
      run: |
        set -x
        mkdir -p output/$RELEASE/$ARCH
        docker run --rm -v $PWD:/share coderus/sailfishos-platform-sdk:$RELEASE /bin/sh -xc '
           mkdir -p build
           cd build
           cp -r /share/. .
           mb2 -t SailfishOS-$1-$2 build -d
           sudo cp -r RPMS/. /share/output/$1/$2/' sh_mb2 $RELEASE $ARCH

    - name: Build ${{ env.ARCH }} on ${{ env.RELEASE }}
      env:
        ARCH: armv7hl
        RELEASE: 3.4.0.24
      run: |
        set -x
        mkdir -p output/$RELEASE/$ARCH
        docker run --rm -v $PWD:/share coderus/sailfishos-platform-sdk:$RELEASE /bin/sh -xc '
           mkdir -p build
           cd build
           cp -r /share/. .
           mb2 -t SailfishOS-$1-$2 build -d
           sudo cp -r RPMS/. /share/output/$1/$2/' sh_mb2 $RELEASE $ARCH

    - name: Build ${{ env.ARCH }} on ${{ env.RELEASE }}
      env:
        ARCH: aarch64
        RELEASE: 4.0.1.45
      run: |
        set -x
        mkdir -p output/$RELEASE/$ARCH
        docker run --rm -v $PWD:/share coderus/sailfishos-platform-sdk:$RELEASE /bin/sh -xc '
           mkdir -p build
           cd build
           cp -r /share/. .
           mb2 -t SailfishOS-$1-$2 build -d
           sudo cp -r RPMS/. /share/output/$1/$2/' sh_mb2 $RELEASE $ARCH

    - name: Upload build results
      uses: actions/upload-artifact@v3
      with:
        name: RPM-build-results-OLDEST
        path: output/

# Due to building two releases for each architecture, they will clobber each other,
# when uploaded to the single directory of a GITHUB_REF
#    - name: Create release
#      if: contains(github.ref, 'release')
#      run: |
#        set -x
#        assets=""
#        for asset in output/*/*/*.rpm; do
#          assets="$assets -a $asset"
#        done
#        tag_name="${GITHUB_REF##*/}"
#        hub release create"$assets" -m "$tag_name" "$tag_name"
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Just for fun, see https://feathericons.com/ and
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#branding
#branding:  # "Invalid workflow file: Unexpected value 'branding'"; maybe action MUST be located in '/' or the name MUST be action.yml, see e.g., https://github.com/actions/cache/blob/main/action.yml#L37
#  icon: 'gift'
#  color: 'purple'
